#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("backend:server");
const path = require("path");
const fs = require("fs");

// Ensure public directory exists
const publicDir = path.join(__dirname, "..", "public");
if (!fs.existsSync(publicDir)) {
  fs.mkdirSync(publicDir, { recursive: true });
}

/**
 * Get port from environment and normalize.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

const port = normalizePort(process.env.PORT || "3002");

/**
 * Listen on provided port, on all network interfaces.
 */

app.listen({ port: port, host: "0.0.0.0" }, (err, address) => {
  if (err) {
    console.error('Failed to start server:', err);
    app.log.error(err);
    process.exit(1);
  }
  
  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;
  console.log(`Server is running on ${address}`);
  debug(`Server is running on ${address}`);
  app.log.info(`Server listening on ${bind}`);
});

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Attach error listener to the Fastify instance
app.ready().catch(err => {
  console.error('Error starting Fastify:', err);
  process.exit(1);
});